<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[干货｜分享80个无版权、高清、免费图片素材网站给你！]]></title>
      <url>/2019/04/24/%E5%88%86%E4%BA%AB80%E4%B8%AA%E6%97%A0%E7%89%88%E6%9D%83%E3%80%81%E9%AB%98%E6%B8%85%E3%80%81%E5%85%8D%E8%B4%B9%E5%9B%BE%E7%89%87%E7%B4%A0%E6%9D%90%E7%BD%91%E7%AB%99%E7%BB%99%E4%BD%A0/</url>
      <content type="html"><![CDATA[<p>现在无论是写文章、做 PPT 还是找壁纸、换头像，搜图片都是件费时却最出效果的事情。之前可能说过小编是做自媒体这一块的，关于图片素材这一块来说，需求量还是蛮大的，所以说，之前介绍的部分网站对于我来说是远远不够的，那今天就一起再来看看这80 个良心无版权图片网站吧，下次别再说找不到图了！<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/1.gif" alt=" "></p>
<ol>
<li><p>Unsplash，最知名的无版权图片网站，这家以风景为主，数量足够多，但是很多滤镜感太强，颜色太过厚重，比较适合做壁纸，事实上很多壁纸软件也是直接从这上面下载的图</p>
</li>
<li><p>visualhunt，数量超级多的无版权图片网站，可以根据颜色进行搜索</p>
</li>
<li><p>别样网，找图新欢，旅行日常为主，图片多为用户自己上传，所以在其他地方很少见到</p>
</li>
<li><p>Gratisography，每周都会更新，图片角度和题材都比较另类，人物图片不少，另外他家的 logo 也比较另类<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/2.png" alt=" "></p>
</li>
<li><p>StreetWill，优点是图片都比较精致小众，缺点是更新慢</p>
</li>
<li><p>Life of Pix，景色建筑为主，色调比较统一</p>
</li>
<li><p>pngimg，这个厉害了，2 万多张不同种类的无背景素材图片！全都是抠好图的，直接免费用！</p>
</li>
<li><p>旅行日记，从名字就能看出来，主要是旅行题材的图片</p>
</li>
<li><p>Oliur Rahman，各种 iPhone、MacBook 和其他物件的好照片<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/3.png" alt=" "></p>
</li>
<li><p>MMT，色调比较亮丽，有很多花，也有很多 iPhone……</p>
</li>
<li><p>Realistic Shots，生活化场景为主，每周 7 张图片</p>
</li>
<li><p>DesignerPics，多为局部特写，也可按种类进行筛选</p>
</li>
<li><p>Stokpic，有很多人物图片，每两周更新 10 张</p>
</li>
<li><p>JéSHOOTS，2014 年开始运营的无版权图片网站，图片质量还不错<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/4.png" alt=" "></p>
</li>
<li><p>ISO REPUBLIC，多走简洁风格</p>
</li>
<li><p>picjumbo，日常场景居多，有不少数码设备</p>
</li>
<li><p>ZEROSPACE，台湾的无版权图片网站，质量还行</p>
</li>
<li><p>RAUMROT，里面有很多可供商用的图片选集，在主页的底部</p>
</li>
<li><p>FFCU，图片数量不多，不过有一些好图</p>
</li>
<li><p>StockSnap，生活类图片，角度和主题都不错</p>
</li>
<li><p>My Stock Photos，这里面的图片都挺好看的<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/5.png" alt=" "></p>
</li>
<li><p>skuawk，摄影师拍摄的无版权图片网站，分类浏览</p>
</li>
<li><p>BARN IMAGES，有很多比较生活化和小清新的图片</p>
</li>
<li><p>freejpg，有一些动物的图片，可直接搜索，也可按照颜色搜索</p>
</li>
<li><p>stockvault，大部分为摄影作品，也有少量的插图</p>
</li>
<li><p>goodfreephotos，1万8千多张无版权图片，质量嘛，参差不齐</p>
</li>
<li><p>Snapwire Snaps，Tumblr 图片博客，以自然风景和食物为主</p>
</li>
<li><p>tookapic，63000+ 的无版权真实照片<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/6.png" alt=" "></p>
</li>
<li><p>FREEMAGEBANK，多为日常生活图片，另外简笔画的图质量也蛮高的</p>
</li>
<li><p>Cupcake，图片色调厚实，适合做背景图</p>
</li>
<li><p>PAKUTASO，一看就知道是霓虹国的网站，稀奇古怪的图片一大堆，不过网站 logo 好萌</p>
</li>
<li><p>Photock，日本的无版权图片网站，在里面能很容易地找到富士山、樱花、东京等元素</p>
</li>
<li><p>無料写真素材，日本无版权图片，全部都是日式元素图片，红叶啊、樱花啊、猫啊啥的</p>
</li>
<li><p>東京デート，日本东京专门的无版权图片网站<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/7.png" alt=" "></p>
</li>
<li><p>沖縄写真素材，恩…日本冲绳专门的无版权图片网站…</p>
</li>
<li><p>Futta，日本无版权图片网站，基本为风景图片</p>
</li>
<li><p>Imgstyle，如其描述：无料、商业利用可、加工自由、登录不要（全部都是高清植物图片）</p>
</li>
<li><p>ソザイング，这家网站有个分类叫做「365日365枚」，就像一本无版权图片的日记本一样，里面有很多很有意思的图片，比方说纯蓝色的水彩、并立的企鹅、一颗土豆等</p>
</li>
<li><p>AllTheFreeStock这个跟 Stocks 差不多，但却更加强大！一个地址，找到所有无版权图片、模型、视频、声效、配色、网页模板、字体、图标、邮件模板。简直就是懒人福音！</p>
</li>
<li><p>EVERYPIXEL，智能搜图工具，可以搜索各大图片网站的图片，并对齐进行精准化的分类。颜色、类型、尺寸、版权，而且可以九宫格单独设置</p>
</li>
<li><p>LibreStock，一键搜索 47 家无版权图片网站的精品好图</p>
</li>
<li><p>Finda Photo，一件搜索 Barn Images、Life Of Pix 等十余家的无版权图片，网站本身做得很简洁<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/8.png" alt=" "></p>
</li>
<li><p>PEEKSPACE，来自NASA的太空图片，科技大片既视感，网页简单图片清晰，直接保存</p>
</li>
<li><p>Freejpg，一个集合各种动物图片的网站，还可以根据主色调来搜索，颜色饱和度较高，图片风格偏向自然风光</p>
</li>
<li><p>FoodiesFeed，打开这个图片网站，你一定会越看越饿，满屏的食物扑面而来，令人不禁手指大动</p>
</li>
<li><p>SozaiPage是日本的一家免费无版权实物图片网站，包括烹饪原始背景图片、食品、餐馆菜品图片、宣传单图片、菜单图片等，所有的图片均在3000像素以上</p>
</li>
<li><p>泼辣有图是摄影人发起的公开创源活动，里面的图片允许任何人将图片使用于任何途径，用户可以根据，自己喜欢的摄影师搜索图片</p>
</li>
<li><p>skuawk，Skuawk集合了自由摄影师拍摄并分享公共领域摄影图片，主要图片分类有，野生动物、景观、城市，人物、技术、静物等</p>
</li>
<li><p>Trunklog，这是由瑞典的一位摄影师，旅行所拍摄的照片集合网站，全部无偿使用<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/9.png" alt=" "></p>
</li>
<li><p>Moveast，MoveAst是一个热门旅行和摄影的葡萄牙人创办的网站，里面全部都是他旅行所见的风景人情，他把自己旅行所拍摄于的高清图片发布在该网站上，让人们免费使用，主题为自然、城市、人文地理</p>
</li>
<li><p>Snapwire Snaps ，这是Tumblr 个人图片博客，以自然风景和食物为主</p>
</li>
<li><p>Cupcake，Cupcake的图片风格多样，色彩搭配协调，偏冷色调，适合小清新的伙伴</p>
</li>
<li><p>StreetWill ，网站页面风格极其冷淡，图片多是生活化的场景，但是比较小众</p>
</li>
<li><p>pngimg，这个网站可厉害了，有2 万多张不同种类的无背景素材图片，还都是抠好图的！直接免费用！</p>
</li>
<li><p>Pixite一个图库网站，可以搜索图片、材质、色调搜索，里面有很多比较精致的小众插图</p>
</li>
<li><p>Imgstyle，一个日本的元素图片网站，有大量高清植物图片 ，可以使用于任何途径，生活日常篇<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/10.png" alt=" "></p>
</li>
<li><p>FancyCrave，每天两张手工筛选精品照片，每张都在诉说一个故事</p>
</li>
<li><p>kaboompics ，大部分图片都是生活化场景 ，手机、日历之类的成为图片主角</p>
</li>
<li><p>Oliur Rahman ，各种 iPhone、MacBook 和其他物件的好照片</p>
</li>
<li><p>New Old Stock，拍摄公共领域的一些老照片，可以免费使用，Freely Photos ，比较多宗教的元素，有很多十字架，还有很多宗教祈祷的图片</p>
</li>
<li><p>迅捷CAD图库，这个就厉害了，对于做相关设计的小伙伴们来说，这里就是天堂啊，各种CAD图纸。免费高清，美图还会定时更新，只有你想不到的，所有素材都可以用来作参考，你说棒不棒。<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/11.png" alt=" "></p>
</li>
<li><p>Realistic Shots，每周 7 张，生活化场景拍摄下的图片</p>
</li>
<li><p>picjumbo 。日常场景居多，有不少数码设备</p>
</li>
<li><p>RAUMROT，在主页的底部，有很多可供商用的图片选集</p>
</li>
<li><p>REFE，个人博客，收集真实生活的无版权图片</p>
</li>
<li><p>StockSnap ，有大量角度和主题都不错的生活类图片</p>
</li>
<li><p>My Stock Photos，这个网站的图片感觉像是尽心挑选过的，图片质量都很高</p>
</li>
<li><p>BARN IMAGES，生活化 小清新的代表，tookapic，含有63000 的无版权真实照片，FREEMAGEBANK 。超多日常生活图片，以及极具趣味性的简笔画图片</p>
</li>
<li><p>Flickr，由于汇集了大批的摄影师，所以Flickr家的图片质量都相当之高，虽然Flickr的图片有版权，但是只要在「授权」那里选择「所有创用CC」或者「允许商业用途」即可找到免费使用的图片，由于 Flickr 目前没有简体中文版，所以搜索时用英文或者繁体中文，结果会更准确<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/12.png" alt=" "></p>
</li>
<li><p>Google，谷歌的图片搜索那是相当的强大，选择右侧的「工具」，可以自定义很多东西，包括大小、颜色及使用权限</p>
</li>
<li><p>DesignerPics ，多为局部特写，也可按种类进行筛选</p>
</li>
<li><p>Pixabay，这家可以说是全球最大的免费图片网站了，图多而且种类足够丰富，这其实也是一家集合网站，可以看到 Unsplash 家的很多图，也能在 Pixabay 里搜到</p>
</li>
<li><p>Pexels ，这家也有很多精美的图，而且比较好的一点是会有「一周精选」，平常没事的时候来收收图也挺好的</p>
</li>
<li><p>visualhunt ，数量超级多的无版权图片网站，可以根据颜色进行搜索，Gratisography，每周都会更新。图片角度和题材都比较特别</p>
</li>
<li><p>IM FREE，图片分类详细，可按分类进行筛选<br><img src="/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/13.png" alt=" "></p>
</li>
<li><p>Magdeleine，有编辑精选，图片也比较厚重</p>
</li>
<li><p>DesignerPics的图片多为局部特写，讲究构图，还可以按照种类，任君筛选</p>
</li>
<li><p>public domainarchive，大部分都是黑白照片，还有很多可供个人使用的无版权图片</p>
</li>
<li><p>goodfreephotos，网站内据说有1万8千多张无版权图片，不过个人觉得这个网站的图片，质量参差不齐，需要好好挑选</p>
</li>
<li>一个个网站翻起来也很耗费精力，所以这些图片集合网站就出现了，在一个网站内，就能找到多家网站的图片，是不是很方便，The Stocks，The Stocks集合了Unsplash、Stocksy、Pixabay、Free Range、Little Visuals一共 17 家图片网站，全部无版权免费使用！</li>
</ol>
]]></content>
      
        <categories>
            
            <category> 图片素材 </category>
            
            <category> 无版权 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 图片素材 </tag>
            
            <tag> 无版权 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo+Github搭建最新教程]]></title>
      <url>/2019/03/26/hexo-github%E6%90%AD%E5%BB%BA%E6%9C%80%E6%96%B0%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>使用github pages服务搭建博客的好处有：</p>
<ol>
<li>全是静态文件，访问速度快；</li>
<li>免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</li>
<li>可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</li>
<li>数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</li>
<li>博客内容可以轻松打包、转移、发布到其它平台；</li>
<li>等等；</li>
</ol>
<h1 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1. 准备工作"></a>1.1. 准备工作</h1><hr>
<p>在开始一切之前，你必须已经：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有一个github账号，没有的话去注册一个；</span><br><span class="line">安装了node.js、npm，并了解相关基础知识；</span><br><span class="line">安装了git for windows（或者其它git客户端）</span><br></pre></td></tr></table></figure>
<p>本文所使用的环境：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows7</span><br><span class="line">Node.js</span><br><span class="line">git</span><br><span class="line">Hexo</span><br></pre></td></tr></table></figure>
<h1 id="2-搭建Github博客"><a href="#2-搭建Github博客" class="headerlink" title="2.搭建Github博客"></a>2.搭建Github博客</h1><h1 id="2-1创建仓库"><a href="#2-1创建仓库" class="headerlink" title="2.1创建仓库"></a>2.1创建仓库</h1><hr>
<p>新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href="http://test.github.io" target="_blank" rel="noopener">http://test.github.io</a> 了，是不是很方便？</p>
<p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>
<p>几个注意的地方：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注册的邮箱一定要验证，否则不会成功；</span><br><span class="line">仓库名字必须是：username.github.io，其中username是你的用户名；</span><br><span class="line">仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效；</span><br></pre></td></tr></table></figure>
<h1 id="2-2绑定域名"><a href="#2-2绑定域名" class="headerlink" title="2.2绑定域名"></a>2.2绑定域名</h1><hr>
<p>当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。</p>
<p>首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！</p>
<p>绑定域名分2种情况：带www和不带www的。</p>
<p>域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下：<br><img src="/2019/03/26/hexo-github搭建最新教程/1.png" alt=" "></p>
<p>然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me</span><br><span class="line">如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me</span><br><span class="line">如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me</span><br></pre></td></tr></table></figure>
<p>另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。</p>
<h1 id="3-配置SSH-key"><a href="#3-配置SSH-key" class="headerlink" title="3.配置SSH key"></a>3.配置SSH key</h1><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>
<p>用git bash执行如下命令：</p>
<p><code>$ cd ~/. ssh #检查本机已存在的ssh密钥</code></p>
<p>如果提示：No such file or directory 说明你是第一次使用git。</p>
<p><code>ssh-keygen -t rsa -C &quot;邮件地址&quot;</code><br>然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：<br><img src="/2019/03/26/hexo-github搭建最新教程/SSHkey.png" alt=" "><br>将刚复制的内容粘贴到key那里，title随便填，保存。</p>
<h1 id="3-1-测试是否成功"><a href="#3-1-测试是否成功" class="headerlink" title="3.1 测试是否成功"></a>3.1 测试是否成功</h1><hr>
<p><code>$ ssh -T git@github.com # 注意邮箱地址不用改</code><br>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：<br><code>Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access.</code></p>
<p>看到这个信息说明SSH已配置成功！</p>
<p>此时你还需要配置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称</span><br><span class="line">$ git config --global user.email  &quot;xxx@qq.com&quot;// 填写你的github注册邮箱</span><br></pre></td></tr></table></figure></p>
<h1 id="4-使用Hexo写博客"><a href="#4-使用Hexo写博客" class="headerlink" title="4.使用Hexo写博客"></a>4.使用Hexo写博客</h1><h1 id="4-1-Hexo简介"><a href="#4-1-Hexo简介" class="headerlink" title="4.1 Hexo简介"></a>4.1 Hexo简介</h1><p>Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。</p>
<p>官网： <a href="http://hexo.io" target="_blank" rel="noopener">http://hexo.io</a><br>github: <a href="https://github.com/hexojs/hexo" target="_blank" rel="noopener">https://github.com/hexojs/hexo</a></p>
<h1 id="4-2-原理"><a href="#4-2-原理" class="headerlink" title="4.2 原理"></a>4.2 原理</h1><hr>
<p>由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。</p>
<h1 id="4-3注意事项"><a href="#4-3注意事项" class="headerlink" title="4.3注意事项"></a>4.3注意事项</h1><hr>
<p>安装之前先来说几个注意事项：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</span><br><span class="line">hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</span><br><span class="line">hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的；</span><br></pre></td></tr></table></figure></p>
<h1 id="4-4-安装"><a href="#4-4-安装" class="headerlink" title="4.4 安装"></a>4.4 安装</h1><hr>
<p><code>$ npm install -g hexo</code></p>
<h1 id="4-5-初始化"><a href="#4-5-初始化" class="headerlink" title="4.5 初始化"></a>4.5 初始化</h1><hr>
<p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\Workspaces\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ hexo init</span><br></pre></td></tr></table></figure></p>
<p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：<br><img src="/2019/03/26/hexo-github搭建最新教程/目录.png" alt=" "><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo g # 生成</span><br><span class="line">$ hexo s # 启动服务</span><br></pre></td></tr></table></figure></p>
<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的：<br><img src="/2019/03/26/hexo-github搭建最新教程/4.png" alt=" "></p>
<p><code>hexo s</code> 是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章：</p>
<p><a href="http://blog.liuxianan.com/windows-port-bind.html" target="_blank" rel="noopener">http://blog.liuxianan.com/windows-port-bind.html</a></p>
<p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑</p>
<h1 id="4-6-修改主题"><a href="#4-6-修改主题" class="headerlink" title="4.6. 修改主题"></a>4.6. 修改主题</h1><hr>
<p>既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。</p>
<p>个人比较喜欢的2个主题：<code>hexo-theme-jekyll</code> 和 <code>hexo-theme-yilia</code>。</p>
<p>首先下载这个主题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd /f/Workspaces/hexo/</span><br><span class="line">$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br></pre></td></tr></table></figure>
<p>下载后的主题都在这里：<br><img src="/2019/03/26/hexo-github搭建最新教程/5.png" alt=" "></p>
<p>修改 <code>_config.yml</code> 中的 <code>theme: landscape</code> 改为 <code>theme: yilia</code>，然后重新执行 <code>hexo g</code> 来重新生成。</p>
<p>如果出现一些莫名其妙的问题，可以先执行 <code>hexo clean</code> 来清理一下 <code>public</code> 的内容，然后再来重新生成和发布。</p>
<h1 id="4-7-上传之前"><a href="#4-7-上传之前" class="headerlink" title="4.7. 上传之前"></a>4.7. 上传之前</h1><hr>
<p>在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。</p>
<h1 id="4-8-上传到github"><a href="#4-8-上传到github" class="headerlink" title="4.8. 上传到github"></a>4.8. 上传到github</h1><hr>
<p>如果你一切都配置好了，发布上传很容易，一句 <code>hexo d</code> 就搞定，当然关键还是你要把所有东西配置好。</p>
<p>首先，<code>ssh key</code> 肯定要配置好。</p>
<p>其次，配置 <code>_config.yml</code> 中有关 <code>deploy</code> 的部分：</p>
<p>正确写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>错误写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: github</span><br><span class="line">  repository: https://github.com/liuxianan/liuxianan.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行 <code>hexo d</code> 的话一般会报如下错误：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Deployer not found: github 或者 Deployer not found: git</span><br></pre></td></tr></table></figure>
<p>原因是还需要安装一个插件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示 <code>Permission denied (publickey)</code>.</p>
<p>打开你的 <code>git bash</code> ，输入 <code>hexo d</code> 就会将本次有改动的代码全部提交，没有改动的不会：<br><img src="/2019/03/26/hexo-github搭建最新教程/6.png" alt=" "></p>
<h1 id="4-9-保留CNAME、README-md等文件"><a href="#4-9-保留CNAME、README-md等文件" class="headerlink" title="4.9. 保留CNAME、README.md等文件"></a>4.9. 保留CNAME、README.md等文件</h1><hr>
<p>提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的：<br><img src="/2019/03/26/hexo-github搭建最新教程/7.png" alt=" "></p>
<p>由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。</p>
<h1 id="4-10-常用hexo命令"><a href="#4-10-常用hexo命令" class="headerlink" title="4.10. 常用hexo命令"></a>4.10. 常用hexo命令</h1><hr>
<p>常见命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br></pre></td></tr></table></figure>
<p>缩写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br></pre></td></tr></table></figure>
<p>组合命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo s -g #生成并本地预览</span><br><span class="line">hexo d -g #生成并上传</span><br></pre></td></tr></table></figure>
<h1 id="4-11-config-yml"><a href="#4-11-config-yml" class="headerlink" title="4.11. _config.yml"></a>4.11. <code>_config.yml</code></h1><hr>
<p>这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。</p>
<p>需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。</p>
<h1 id="4-12-写博客"><a href="#4-12-写博客" class="headerlink" title="4.12. 写博客"></a>4.12. 写博客</h1><hr>
<p>定位到我们的hexo根目录，执行命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new &apos;my-first-blog&apos;</span><br></pre></td></tr></table></figure>
<p>hexo会帮我们在 <code>_posts</code> 下生成相关md文件：<br><img src="/2019/03/26/hexo-github搭建最新教程/8.png" alt=" "></p>
<p>我们只需要打开这个文件就可以开始写博客了，默认生成如下内容：<br><img src="/2019/03/26/hexo-github搭建最新教程/9.png" alt=" "></p>
<p>当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。</p>
<p>一般完整格式如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: postName #文章页面上的显示名称，一般是中文</span><br><span class="line">date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改</span><br><span class="line">categories: 默认分类 #分类</span><br><span class="line">tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格</span><br><span class="line">description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">以下是正文</span><br></pre></td></tr></table></figure>
<p>那么 <code>hexo new page &#39;postName&#39;</code> 命令和 <code>hexo new &#39;postName&#39;</code> 有什么区别呢？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new page &quot;my-second-blog&quot;</span><br></pre></td></tr></table></figure>
<p>生成如下：<br><img src="/2019/03/26/hexo-github搭建最新教程/10.png" alt=" "></p>
<p>最终部署时生成：<code>hexo\public\my-second-blog\index.html</code> ，但是它不会作为文章出现在博文目录。</p>
<h1 id="4-12-1-写博客工具"><a href="#4-12-1-写博客工具" class="headerlink" title="4.12.1. 写博客工具"></a>4.12.1. 写博客工具</h1><hr>
<p>那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。</p>
<h1 id="4-12-2-如何让博文列表不显示全部内容"><a href="#4-12-2-如何让博文列表不显示全部内容" class="headerlink" title="4.12.2. 如何让博文列表不显示全部内容"></a>4.12.2. 如何让博文列表不显示全部内容</h1><hr>
<p>默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？</p>
<p>答案是在合适的位置加上 <code>&lt;!--more--&gt;</code> 即可，例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 前言</span><br><span class="line"></span><br><span class="line">使用github pages服务搭建博客的好处有：</span><br><span class="line"></span><br><span class="line">1. 全是静态文件，访问速度快；</span><br><span class="line">2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；</span><br><span class="line">3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line">4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；</span><br><span class="line">5. 博客内容可以轻松打包、转移、发布到其它平台；</span><br><span class="line">6. 等等；</span><br></pre></td></tr></table></figure>
<p>最终效果：<br><img src="/2019/03/26/hexo-github搭建最新教程/11.png" alt=" "></p>
<h1 id="5-最终效果"><a href="#5-最终效果" class="headerlink" title="5.最终效果"></a>5.最终效果</h1><p>可以访问我的git博客来查看效果： <a href="https://sailorchina.github.io/" target="_blank" rel="noopener">https://sailorchina.github.io/</a></p>
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
            <category> hexo+github搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 搭建博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> 博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[BBR+BBR魔改+Lotsever(锐速)一键脚本 for Centos/Debian/Ubuntu]]></title>
      <url>/2019/03/23/BBR+BBR%E9%AD%94%E6%94%B9+Lotsever/</url>
      <content type="html"><![CDATA[<h1 id="教程更新"><a href="#教程更新" class="headerlink" title="教程更新"></a>教程更新</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">【2018年12月24日】</span><br><span class="line">脚本新增BBRplus修正版，解决原版bbr在高丢包率下易失速以及bbr收敛慢的问题。尝试使其更好，减少排队和丢包。</span><br><span class="line">【2018年3月8日】</span><br><span class="line">脚本新增南琴浪的暴力魔改BBR，使速度更加暴力，实际效果因线路而定。</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="脚本安装"><a href="#脚本安装" class="headerlink" title="脚本安装"></a>脚本安装</h1><p>支持系统：CentOS 6+、Debian 8+、Ubuntu 14+。</p>
<p>注意：该脚本在Vultr各个系统均测试通过，如果期间有出现任何问题，可向原作者反映帮助改善。<br>运行以下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#过程有2步，第1步安装相应的内核，第2步开启内核对应的加速</span><br><span class="line">wget -N --no-check-certificate https://github.com/SailorChina/serverspeeder.git &amp;&amp; bash serverspeeder.sh</span><br></pre></td></tr></table></figure>
<p><img src="/2019/03/23/BBR+BBR魔改+Lotsever/1.png" alt=" "></p>
<p>根据自己需求操作，重启后再使用./tcp.sh命令接着操作。</p>
<p>如果在删除内核环节出现这样一张图</p>
<p><img src="/2019/03/23/BBR+BBR魔改+Lotsever/2.png" alt=" "></p>
<p>注意选择NO，然后根据提示重启系统。</p>
<p>对于速度提成来说，锐速效果最好，魔改BBR和BBR修正版由于VPS网络不同测试效果不一，具体效果还是自己先测试一下再选择吧。</p>
]]></content>
      
        <categories>
            
            <category> 加速 </category>
            
            <category> TCP加速 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> BBR </tag>
            
            <tag> BBR魔改 </tag>
            
            <tag> Lotsever(锐速) </tag>
            
            <tag> Centos </tag>
            
            <tag> Debian </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown基本语法]]></title>
      <url>/2019/03/23/Markdown%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<p>Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。<br>相比WYSIWYG编辑器<br>优点：<br>1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。<br>2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可<br>缺点：<br>1、需要记一些语法（当然，是很简单。五分钟学会）。<br>2、有些平台不支持Markdown编辑模式。<br>还好，简书是支持Markdown编辑模式的。</p>
<hr>
<h1 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h1><p>在想要设置为标题的文字前面加#来表示<br>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。</p>
<p>注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h3 id="这是三级标题"><a href="#这是三级标题" class="headerlink" title="这是三级标题"></a>这是三级标题</h3><h4 id="这是四级标题"><a href="#这是四级标题" class="headerlink" title="这是四级标题"></a>这是四级标题</h4><h5 id="这是五级标题"><a href="#这是五级标题" class="headerlink" title="这是五级标题"></a>这是五级标题</h5><h6 id="这是六级标题"><a href="#这是六级标题" class="headerlink" title="这是六级标题"></a>这是六级标题</h6><hr>
<h1 id="二、字体"><a href="#二、字体" class="headerlink" title="二、字体"></a>二、字体</h1><ul>
<li><h1 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h1>要加粗的文字左右分别用两个*号包起来</li>
<li><h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1>要倾斜的文字左右分别用一个*号包起来</li>
<li><h1 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h1>要倾斜和加粗的文字左右分别用三个*号包起来</li>
<li><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1>要加删除线的文字左右分别用两个~~号包起来<br>示例:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**这是加粗的文字**</span><br><span class="line">*这是倾斜的文字*`</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>效果如下：</p>
<p><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><strong><em>这是斜体加粗的文字</em></strong></p>
<h2 id="这是加删除线的文字"><a href="#这是加删除线的文字" class="headerlink" title="这是加删除线的文字"></a><del>这是加删除线的文字</del></h2><h1 id="三、引用"><a href="#三、引用" class="headerlink" title="三、引用"></a>三、引用</h1><p>在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;<br>n个…<br>貌似可以一直加下去，但没神马卵用</p>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>这是引用的内容</p>
<blockquote>
<p>111111</p>
<blockquote>
<p>222222</p>
<blockquote>
<p>333333</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<hr>
<h1 id="四、分割线"><a href="#四、分割线" class="headerlink" title="四、分割线"></a>四、分割线</h1><p> 三个或者三个以上的 - 或者 * 都可以。</p>
<p> 示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">****</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="五、列表"><a href="#五、列表" class="headerlink" title="五、列表"></a>五、列表</h1><ul>
<li><strong>无序列表</strong></li>
</ul>
<p>语法：<br>无序列表用 - + * 任何一种都可以</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 列表内容</span><br><span class="line">+ 列表内容</span><br><span class="line">* 列表内容</span><br><span class="line"></span><br><span class="line">注意：- + * 跟内容之间都要有一个空格</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li>列表内容</li>
</ul>
<ul>
<li><strong>有序列表</strong><br>语法：<br>数字加点<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 列表内容</span><br><span class="line">2. 列表内容</span><br><span class="line">3. 列表内容</span><br><span class="line"></span><br><span class="line">注意：序号跟内容之间要有空格</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>效果如下：</p>
<ol>
<li>列表内容</li>
<li>列表内容</li>
<li>列表内容</li>
</ol>
<hr>
<h1 id="六、表格"><a href="#六、表格" class="headerlink" title="六、表格"></a>六、表格</h1><p>语法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略</span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">姓名|技能|排行</span><br><span class="line">--|:--:|--:</span><br><span class="line">刘备|哭|大哥</span><br><span class="line">关羽|打|二哥</span><br><span class="line">张飞|骂|三弟</span><br></pre></td></tr></table></figure></p>
<p>效果如下：</p>
<table>
<thead>
<tr>
<th>姓名</th>
<th style="text-align:center">技能</th>
<th style="text-align:right">排行</th>
</tr>
</thead>
<tbody>
<tr>
<td>刘备</td>
<td style="text-align:center">哭</td>
<td style="text-align:right">大哥</td>
</tr>
<tr>
<td>关羽</td>
<td style="text-align:center">打</td>
<td style="text-align:right">二哥</td>
</tr>
<tr>
<td>张飞</td>
<td style="text-align:center">骂</td>
<td style="text-align:right">三弟</td>
</tr>
</tbody>
</table>
<h1 id="七、代码"><a href="#七、代码" class="headerlink" title="七、代码"></a>七、代码</h1><p>语法：<br>单行代码：代码之间分别用一个反引号包起来</p>
<p><code></code>代码内容<code></code></p>
<p>代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">  代码...</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>
<p>注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。</p>
<p>示例：</p>
<p>单行代码</p>
<p><code>create database hero;</code></p>
<p>代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(```)</span><br><span class="line">    function fun()&#123;</span><br><span class="line">         echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    fun();</span><br><span class="line">(```)</span><br></pre></td></tr></table></figure>
<p>效果如下：</p>
<p>单行代码</p>
<p><code>create database hero;</code></p>
<p>代码块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function fun()&#123;</span><br><span class="line">     echo &quot;这是一句非常牛逼的代码&quot;;</span><br><span class="line">&#125;</span><br><span class="line">fun();</span><br></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 博客语法 </category>
            
            <category> Markdown语法 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> 语法 </tag>
            
            <tag> 博客语法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Linux系统一键评测]]></title>
      <url>/2019/03/23/LINUX%E7%B3%BB%E7%BB%9F%E4%B8%80%E9%94%AE%E8%AF%84%E6%B5%8B/</url>
      <content type="html"></content>
      
        <categories>
            
            <category> Linux系统 </category>
            
            <category> 软件 </category>
            
            <category> 一键评测 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux系统 </tag>
            
            <tag> 软件 </tag>
            
            <tag> 一键评测 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo之Next主题添加标签]]></title>
      <url>/2019/03/23/hexo%E4%B9%8Bnext%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h1 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h1><h1 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h1><p>打开命令行，进入博客所在文件夹。执行命令<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure></p>
<p>成功后会提示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure></p>
<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>
<hr>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br></pre></td></tr></table></figure>
<hr>
<p>添加type: “categories”到内容中，添加后是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>保存并关闭文件。</p>
<h1 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h1><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br></pre></td></tr></table></figure>
<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。</p>
<hr>
<h1 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h1><h1 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h1><p>打开命令行，进入博客所在文件夹。执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>成功后会提示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure></p>
<p>根据上面的路径，找到index.md这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br></pre></td></tr></table></figure>
<hr>
<p>添加type: “tags”到内容中，添加后是这样的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure></p>
<p>保存并关闭文件。</p>
<h1 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h1><p>打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格</p>
<ul>
<li>表单验证就是这篇文章的标签了<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。<br>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。<br>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。<br>教程结束，赶紧去设置吧！</p>
]]></content>
      
        <categories>
            
            <category> Next主题 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Next主题 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[机场搭建]]></title>
      <url>/2019/03/23/%E6%9C%BA%E5%9C%BA%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<h1 id="1-安装内核"><a href="#1-安装内核" class="headerlink" title="1.安装内核"></a>1.安装内核</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/SailorChina/Lotseverbbr/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="2-安装锐速破解版"><a href="#2-安装锐速破解版" class="headerlink" title="2.安装锐速破解版"></a>2.安装锐速破解版</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://raw.githubusercontent.com/SailorChina/serverspeeder/master/serverspeeder.sh &amp;&amp; bash serverspeeder.sh</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="3-安装ssrpanel前端"><a href="#3-安装ssrpanel前端" class="headerlink" title="3.安装ssrpanel前端"></a>3.安装ssrpanel前端</h1><p>新版脚本有以下特性：</p>
<p>商业版面板适用于CentOS 6~7（包括redhat）、Debian 8、Ubuntu 16的64位。<br>一键搭建sspanel 或 ssrpanel [整合两个面板]<br>附带管理工具及修改工具<br>后续版本将添加一机多节点功能、节点一键对接V2ray等更多新功能<br>经测试在 阿里云, 腾讯云，华为云，京东云，vultr，快云服务器上通过<br>宝塔对接搭建教程：</p>
<p>请使用宝塔5.9稳定版搭建：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure>
<p>For sspanel:</p>
<p>1.安装宝塔面面板，PHP版本选择7.1，数据库选择mysql5.6, 其他默认，使用Nginx环境。</p>
<p>2.新建站点，记住域名[请保持目录为域名的状态,如域名为<a href="http://www.baidu.com，目录务必为www/wwwroot/www.baidu.com]。" target="_blank" rel="noopener">www.baidu.com，目录务必为www/wwwroot/www.baidu.com]。</a></p>
<p>3.新建数据库sspanel，记住数据库用户和密码，（宝塔面板默认数据库名=用户名），如果不是sspanel请自己设置为sspanel。</p>
<p>4.运行对接脚本,选择sspanel for bt，搭建sspanel</p>
<p>5.登录后台测试(默认账号<a href="mailto:marisn@67cc.cn" target="_blank" rel="noopener">marisn@67cc.cn</a> 密码marisn)</p>
<p>6.若登录无反应，请查看网站目录/config/.config.php配置文件中的数据库配置是否正确</p>
<p>7.设置监控，打开xshell运行crontab -e,此处使用的是vi命令(不会的请百度),设置以下代码,<br>请将其中的/data/wwwroot/default更改为你的网站目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0 0 * * * php -n /data/wwwroot/default/xcat dailyjob</span><br><span class="line">*/1 * * * * php /data/wwwroot/default/xcat checkjob</span><br><span class="line">*/1 * * * * php /data/wwwroot/default/xcat syncnode</span><br><span class="line">30 22 * * * php /data/wwwroot/default/xcat sendDiaryMail</span><br></pre></td></tr></table></figure>
<p>For ssrpanel:</p>
<p>1.安装宝塔面面板，PHP版本选择7.1，数据库选择mysql5.6, 其他默认，使用Nginx环境。</p>
<p>2.新建站点，记住域名[请保持目录为域名的状态,如域名为<a href="http://www.baidu.com，目录务必为www/wwwroot/www.baidu.com]。" target="_blank" rel="noopener">www.baidu.com，目录务必为www/wwwroot/www.baidu.com]。</a></p>
<p>3.新建数据库ssrpanel，记住数据库用户和密码，（宝塔面板默认数据库名=用户名），如果不是ssrpanel请自己设置为ssrpanel。</p>
<p>4.运行对接脚本,选择ssrpanel for bt，搭建ssrpanel</p>
<p>5.登录后台测试(默认账号admin 密码123456)</p>
<p>6.若登录无反应，请查看网站目录/.env配置文件中的数据库配置是否正确</p>
<p>7.设置监控，打开xshell运行crontab -e,此处使用的是vi命令(不会的请百度),设置以下代码,<br>请将其中的/data/wwwroot/default更改为你的网站目录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* * * * * php /data/wwwroot/default/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1</span><br></pre></td></tr></table></figure>
<ul>
<li><p>一键安装（免费稳定包）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/SailorChina/ssrpanel-master/master/stable-script.sh&amp;&amp;chmod +x stable-script.sh&amp;&amp;bash stable-script.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>一键安装（测试版）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate https://raw.githubusercontent.com/SailorChina/ssrpanel-master/master/dev-script.sh&amp;&amp;chmod +x dev-script.sh&amp;&amp;bash dev-script.sh</span><br></pre></td></tr></table></figure>
</li>
<li><p>一键安装（十一付费）</p>
<figure class="highlight plain"><figcaption><span>-y install wget && wget -N --no-check-certificate</span><a href="https://raw.githubusercontent.com/marisn2017/Commercial-version/master/script.sh" target="_blank" rel="noopener">&& chmod +x script.sh && ./script.sh```</a></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#4.后端对接</span><br><span class="line">- sspanel(API对接)</span><br></pre></td></tr></table></figure>
<p>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/SailorChina/SS-PANEL-API/master/node.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/SailorChina/SS-PANEL-API/master/node.sh</a> &amp;&amp; chmod +x node.sh  &amp;&amp; ./node.sh<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">或</span><br></pre></td></tr></table></figure></p>
</li>
</ul>
<p>wget -N –no-check-certificate <a href="https://raw.githubusercontent.com/SailorChina/ss-panel-v3-mod_Uim-master/master/node.sh" target="_blank" rel="noopener">https://raw.githubusercontent.com/SailorChina/ss-panel-v3-mod_Uim-master/master/node.sh</a> &amp;&amp; chmod +x node.sh &amp;&amp; ./node.sh<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 加了个简易守护程序和开机自启 如果是centos7,应该稳定不断的(每5分钟监控，也可能掉线五分钟)</span><br><span class="line"></span><br><span class="line">- ssrpanel(API对接)</span><br><span class="line"></span><br><span class="line"># 和前端一样</span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line"></span><br><span class="line">出现500错误</span><br><span class="line">理论上操作到上面那些步骤完了应该是可以正常访问网站了，如果网站出现500错误，请看WIKI，很有可能是fastcgi的错误</span><br><span class="line"></span><br><span class="line">请看WIKI：https://github.com/ssrpanel/ssrpanel/wiki/%E5%87%BA%E7%8E%B0-open_basedir%E9%94%99%E8%AF%AF</span><br><span class="line"></span><br><span class="line">修改完记得重启NGINX和PHP-FPM</span><br><span class="line"></span><br><span class="line">重启NGINX和PHP-FPM</span><br></pre></td></tr></table></figure></p>
<p>service nginx restart<br>service php-fpm restart<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">定时任务（发邮件、流量统计、自动任务全部需要用到）【脚本已经自动添加】</span><br><span class="line"></span><br><span class="line">crontab加入如下命令（请自行修改ssrpanel路径）：</span><br><span class="line">（表示每分钟都执行定时任务，具体什么任务什么时候执行程序里已经定义了，请不要乱改，否则流量统计数据可能出错）</span><br></pre></td></tr></table></figure></p>
<ul>
<li><ul>
<li><ul>
<li><ul>
<li><ul>
<li>php /home/wwwroot/default/artisan schedule:run &gt;&gt; /dev/null 2&gt;&amp;1<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">邮件配置</span><br><span class="line">SMTP：</span><br><span class="line"></span><br><span class="line">编辑 .env 文件，修改 MAIL_ 开头的配置</span><br><span class="line">Mailgun：</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">编辑 .env 文件</span><br><span class="line">将 MAIL_DRIVER 值改为 mailgun</span><br><span class="line"></span><br><span class="line">然后编辑 config/services.php</span><br><span class="line"></span><br><span class="line">请自行配置如下内容</span><br><span class="line">&apos;mailgun&apos; =&gt; [</span><br><span class="line">    &apos;domain&apos; =&gt; &apos;mailgun发件域名&apos;,</span><br><span class="line">    &apos;secret&apos; =&gt; &apos;mailgun上申请到的secret&apos;,</span><br><span class="line">],</span><br><span class="line">发邮件失败处理：</span><br><span class="line"></span><br><span class="line">如果使用了逗比的ban_iptables.sh来防止用户发垃圾邮件</span><br><span class="line">可能会导致出现 Connection could not be established with host smtp.exmail.qq.com [Connection timed out #110] 这样的错误</span><br><span class="line">因为smtp发邮件必须用到25,26,465,587这四个端口，逗比的一键脚本会将这些端口一并封禁</span><br><span class="line">可以编辑iptables，注释掉以下这段（前面加个#号就可以），然后保存并重启iptables</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>#-A OUTPUT -p tcp -m multiport –dports 25,26,465,587 -m state –state NEW,ESTABLISHED -j REJECT –reject-with icmp-port-unreachable<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">英文版</span><br><span class="line"></span><br><span class="line">修改 .env 的 APP_LOCALE 值为 en</span><br><span class="line">语言包位于 resources/lang 下，可自行更改</span><br><span class="line"></span><br><span class="line">单端口多用户（推荐）</span><br><span class="line"></span><br><span class="line">编辑节点的 user-config.json 文件：</span><br><span class="line">vim user-config.json</span><br><span class="line"></span><br><span class="line">将 “additional_ports” : &#123;&#125;, 改为以下内容：</span><br></pre></td></tr></table></figure></p>
<p>“additional_ports” : {<br>    “80”: {<br>        “passwd”: “统一认证密码”, // 例如 SSRP4ne1，推荐不要出现除大小写字母数字以外的任何字符<br>        “method”: “统一认证加密方式”, // 例如 aes-128-ctr<br>        “protocol”: “统一认证协议”, // 可选值：orgin、verify_deflate、auth_sha1_v4、auth_aes128_md5（推荐）、auth_aes128_sha1（推荐）、auth_chain_a（强烈推荐）<br>        “protocol_param”: “#”,<br>        “obfs”: “tls1.2_ticket_auth”, // 可选值：plain、http_simple（该值下客户端可用http_post）、random_head、tls1.2_ticket_auth（强烈推荐）<br>        “obfs_param”: “”<br>    },<br>    “443”: {<br>        “passwd”: “统一认证密码”,<br>        “method”: “统一认证加密方式”,<br>        “protocol”: “统一认证协议”,<br>        “protocol_param”: “#”,<br>        “obfs”: “tls1.2_ticket_auth”,<br>        “obfs_param”: “”<br>    }<br>}<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">保存，然后重启SSR服务。</span><br><span class="line">客户端设置：</span><br></pre></td></tr></table></figure></p>
<p>远程端口：80<br>密码：password<br>加密方式：aes-128-ctr<br>协议：auth_aes128_md5<br>混淆插件：tls1.2_ticket_auth<br>协议参数：1026:@123 (SSR端口:SSR密码)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">或</span><br></pre></td></tr></table></figure></p>
<p>远程端口：443<br>密码：password<br>加密方式：aes-128-ctr<br>协议：auth_aes128_sha1<br>混淆插件：tls1.2_ticket_auth<br>协议参数：1026:SSRP4ne1 (SSR端口:SSR密码)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">经实测，节点后端使用auth_sha1_v4_compatible，可以兼容auth_chain_a</span><br><span class="line">注意：如果想强制所有账号都走80、443这样自定义的端口的话，记得把 user-config.json 中的 additional_ports_only 设置为 true</span><br><span class="line">警告：经实测单端口下如果用锐速没有效果，很可能是VPS供应商限制了这两个端口</span><br><span class="line">提示：配置单端口最好先看下这个WIKI，防止才踩坑：https://github.com/ssrpanel/ssrpanel/wiki/%E5%8D%95%E7%AB%AF%E5%8F%A3%E5%A4%9A%E7%94%A8%E6%88%B7%E7%9A%84%E5%9D%91</span><br><span class="line"></span><br><span class="line">校时</span><br><span class="line">如果架构是“面板机-数据库机-多节点机”，请务必保持各个服务器之间的时间一致，否则会产生：节点的在线数不准确、产生最后使用时间异常、单端口多用户功能失效等。</span><br><span class="line">推荐统一使用CST时间并安装校时服务：</span><br></pre></td></tr></table></figure></p>
<p>vim /etc/sysconfig/clock 把值改为 Asia/Shanghai<br>cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">重启一下服务器，然后：</span><br></pre></td></tr></table></figure></p>
<p>yum install ntp<br>ntpdate cn.pool.ntp.org<br><code>`</code></p>
]]></content>
      
        <categories>
            
            <category> 机场搭建 </category>
            
            <category> SSRPANEL </category>
            
            <category> 锐速 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 机场搭建 </tag>
            
            <tag> SSRPANEL </tag>
            
            <tag> 锐速 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
