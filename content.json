{"meta":{"title":"毓头的折腾事","subtitle":null,"description":"并不是我喜欢折腾这些玩意，而是“穷”把我折腾得这么疲惫","author":"毓头吃芋头","url":"http://sailorchina.coding.me","root":"/"},"pages":[{"title":"分类","date":"2019-04-08T05:58:05.000Z","updated":"2019-04-08T06:04:25.760Z","comments":true,"path":"categories/index.html","permalink":"http://sailorchina.coding.me/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-04-08T06:27:47.000Z","updated":"2019-04-08T06:28:19.669Z","comments":true,"path":"tags/index.html","permalink":"http://sailorchina.coding.me/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"干货｜分享80个无版权、高清、免费图片素材网站给你！","slug":"分享80个无版权、高清、免费图片素材网站给你","date":"2019-04-24T03:21:47.000Z","updated":"2019-04-24T08:20:07.903Z","comments":true,"path":"2019/04/24/分享80个无版权、高清、免费图片素材网站给你/","link":"","permalink":"http://sailorchina.coding.me/2019/04/24/分享80个无版权、高清、免费图片素材网站给你/","excerpt":"","text":"现在无论是写文章、做 PPT 还是找壁纸、换头像，搜图片都是件费时却最出效果的事情。之前可能说过小编是做自媒体这一块的，关于图片素材这一块来说，需求量还是蛮大的，所以说，之前介绍的部分网站对于我来说是远远不够的，那今天就一起再来看看这80 个良心无版权图片网站吧，下次别再说找不到图了！ Unsplash，最知名的无版权图片网站，这家以风景为主，数量足够多，但是很多滤镜感太强，颜色太过厚重，比较适合做壁纸，事实上很多壁纸软件也是直接从这上面下载的图 visualhunt，数量超级多的无版权图片网站，可以根据颜色进行搜索 别样网，找图新欢，旅行日常为主，图片多为用户自己上传，所以在其他地方很少见到 Gratisography，每周都会更新，图片角度和题材都比较另类，人物图片不少，另外他家的 logo 也比较另类 StreetWill，优点是图片都比较精致小众，缺点是更新慢 Life of Pix，景色建筑为主，色调比较统一 pngimg，这个厉害了，2 万多张不同种类的无背景素材图片！全都是抠好图的，直接免费用！ 旅行日记，从名字就能看出来，主要是旅行题材的图片 Oliur Rahman，各种 iPhone、MacBook 和其他物件的好照片 MMT，色调比较亮丽，有很多花，也有很多 iPhone…… Realistic Shots，生活化场景为主，每周 7 张图片 DesignerPics，多为局部特写，也可按种类进行筛选 Stokpic，有很多人物图片，每两周更新 10 张 JéSHOOTS，2014 年开始运营的无版权图片网站，图片质量还不错 ISO REPUBLIC，多走简洁风格 picjumbo，日常场景居多，有不少数码设备 ZEROSPACE，台湾的无版权图片网站，质量还行 RAUMROT，里面有很多可供商用的图片选集，在主页的底部 FFCU，图片数量不多，不过有一些好图 StockSnap，生活类图片，角度和主题都不错 My Stock Photos，这里面的图片都挺好看的 skuawk，摄影师拍摄的无版权图片网站，分类浏览 BARN IMAGES，有很多比较生活化和小清新的图片 freejpg，有一些动物的图片，可直接搜索，也可按照颜色搜索 stockvault，大部分为摄影作品，也有少量的插图 goodfreephotos，1万8千多张无版权图片，质量嘛，参差不齐 Snapwire Snaps，Tumblr 图片博客，以自然风景和食物为主 tookapic，63000+ 的无版权真实照片 FREEMAGEBANK，多为日常生活图片，另外简笔画的图质量也蛮高的 Cupcake，图片色调厚实，适合做背景图 PAKUTASO，一看就知道是霓虹国的网站，稀奇古怪的图片一大堆，不过网站 logo 好萌 Photock，日本的无版权图片网站，在里面能很容易地找到富士山、樱花、东京等元素 無料写真素材，日本无版权图片，全部都是日式元素图片，红叶啊、樱花啊、猫啊啥的 東京デート，日本东京专门的无版权图片网站 沖縄写真素材，恩…日本冲绳专门的无版权图片网站… Futta，日本无版权图片网站，基本为风景图片 Imgstyle，如其描述：无料、商业利用可、加工自由、登录不要（全部都是高清植物图片） ソザイング，这家网站有个分类叫做「365日365枚」，就像一本无版权图片的日记本一样，里面有很多很有意思的图片，比方说纯蓝色的水彩、并立的企鹅、一颗土豆等 AllTheFreeStock这个跟 Stocks 差不多，但却更加强大！一个地址，找到所有无版权图片、模型、视频、声效、配色、网页模板、字体、图标、邮件模板。简直就是懒人福音！ EVERYPIXEL，智能搜图工具，可以搜索各大图片网站的图片，并对齐进行精准化的分类。颜色、类型、尺寸、版权，而且可以九宫格单独设置 LibreStock，一键搜索 47 家无版权图片网站的精品好图 Finda Photo，一件搜索 Barn Images、Life Of Pix 等十余家的无版权图片，网站本身做得很简洁 PEEKSPACE，来自NASA的太空图片，科技大片既视感，网页简单图片清晰，直接保存 Freejpg，一个集合各种动物图片的网站，还可以根据主色调来搜索，颜色饱和度较高，图片风格偏向自然风光 FoodiesFeed，打开这个图片网站，你一定会越看越饿，满屏的食物扑面而来，令人不禁手指大动 SozaiPage是日本的一家免费无版权实物图片网站，包括烹饪原始背景图片、食品、餐馆菜品图片、宣传单图片、菜单图片等，所有的图片均在3000像素以上 泼辣有图是摄影人发起的公开创源活动，里面的图片允许任何人将图片使用于任何途径，用户可以根据，自己喜欢的摄影师搜索图片 skuawk，Skuawk集合了自由摄影师拍摄并分享公共领域摄影图片，主要图片分类有，野生动物、景观、城市，人物、技术、静物等 Trunklog，这是由瑞典的一位摄影师，旅行所拍摄的照片集合网站，全部无偿使用 Moveast，MoveAst是一个热门旅行和摄影的葡萄牙人创办的网站，里面全部都是他旅行所见的风景人情，他把自己旅行所拍摄于的高清图片发布在该网站上，让人们免费使用，主题为自然、城市、人文地理 Snapwire Snaps ，这是Tumblr 个人图片博客，以自然风景和食物为主 Cupcake，Cupcake的图片风格多样，色彩搭配协调，偏冷色调，适合小清新的伙伴 StreetWill ，网站页面风格极其冷淡，图片多是生活化的场景，但是比较小众 pngimg，这个网站可厉害了，有2 万多张不同种类的无背景素材图片，还都是抠好图的！直接免费用！ Pixite一个图库网站，可以搜索图片、材质、色调搜索，里面有很多比较精致的小众插图 Imgstyle，一个日本的元素图片网站，有大量高清植物图片 ，可以使用于任何途径，生活日常篇 FancyCrave，每天两张手工筛选精品照片，每张都在诉说一个故事 kaboompics ，大部分图片都是生活化场景 ，手机、日历之类的成为图片主角 Oliur Rahman ，各种 iPhone、MacBook 和其他物件的好照片 New Old Stock，拍摄公共领域的一些老照片，可以免费使用，Freely Photos ，比较多宗教的元素，有很多十字架，还有很多宗教祈祷的图片 迅捷CAD图库，这个就厉害了，对于做相关设计的小伙伴们来说，这里就是天堂啊，各种CAD图纸。免费高清，美图还会定时更新，只有你想不到的，所有素材都可以用来作参考，你说棒不棒。 Realistic Shots，每周 7 张，生活化场景拍摄下的图片 picjumbo 。日常场景居多，有不少数码设备 RAUMROT，在主页的底部，有很多可供商用的图片选集 REFE，个人博客，收集真实生活的无版权图片 StockSnap ，有大量角度和主题都不错的生活类图片 My Stock Photos，这个网站的图片感觉像是尽心挑选过的，图片质量都很高 BARN IMAGES，生活化 小清新的代表，tookapic，含有63000 的无版权真实照片，FREEMAGEBANK 。超多日常生活图片，以及极具趣味性的简笔画图片 Flickr，由于汇集了大批的摄影师，所以Flickr家的图片质量都相当之高，虽然Flickr的图片有版权，但是只要在「授权」那里选择「所有创用CC」或者「允许商业用途」即可找到免费使用的图片，由于 Flickr 目前没有简体中文版，所以搜索时用英文或者繁体中文，结果会更准确 Google，谷歌的图片搜索那是相当的强大，选择右侧的「工具」，可以自定义很多东西，包括大小、颜色及使用权限 DesignerPics ，多为局部特写，也可按种类进行筛选 Pixabay，这家可以说是全球最大的免费图片网站了，图多而且种类足够丰富，这其实也是一家集合网站，可以看到 Unsplash 家的很多图，也能在 Pixabay 里搜到 Pexels ，这家也有很多精美的图，而且比较好的一点是会有「一周精选」，平常没事的时候来收收图也挺好的 visualhunt ，数量超级多的无版权图片网站，可以根据颜色进行搜索，Gratisography，每周都会更新。图片角度和题材都比较特别 IM FREE，图片分类详细，可按分类进行筛选 Magdeleine，有编辑精选，图片也比较厚重 DesignerPics的图片多为局部特写，讲究构图，还可以按照种类，任君筛选 public domainarchive，大部分都是黑白照片，还有很多可供个人使用的无版权图片 goodfreephotos，网站内据说有1万8千多张无版权图片，不过个人觉得这个网站的图片，质量参差不齐，需要好好挑选 一个个网站翻起来也很耗费精力，所以这些图片集合网站就出现了，在一个网站内，就能找到多家网站的图片，是不是很方便，The Stocks，The Stocks集合了Unsplash、Stocksy、Pixabay、Free Range、Little Visuals一共 17 家图片网站，全部无版权免费使用！","categories":[{"name":"图片素材","slug":"图片素材","permalink":"http://sailorchina.coding.me/categories/图片素材/"},{"name":"无版权","slug":"图片素材/无版权","permalink":"http://sailorchina.coding.me/categories/图片素材/无版权/"}],"tags":[{"name":"图片素材","slug":"图片素材","permalink":"http://sailorchina.coding.me/tags/图片素材/"},{"name":"无版权","slug":"无版权","permalink":"http://sailorchina.coding.me/tags/无版权/"}]},{"title":"Hexo+Github搭建最新教程","slug":"hexo-github搭建最新教程","date":"2019-03-26T06:00:20.000Z","updated":"2019-04-22T06:54:24.558Z","comments":true,"path":"2019/03/26/hexo-github搭建最新教程/","link":"","permalink":"http://sailorchina.coding.me/2019/03/26/hexo-github搭建最新教程/","excerpt":"","text":"1. 前言使用github pages服务搭建博客的好处有： 全是静态文件，访问速度快； 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台； 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的； 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行； 博客内容可以轻松打包、转移、发布到其它平台； 等等； 1.1. 准备工作 在开始一切之前，你必须已经： 有一个github账号，没有的话去注册一个；安装了node.js、npm，并了解相关基础知识；安装了git for windows（或者其它git客户端） 本文所使用的环境： Windows7Node.jsgitHexo 2.搭建Github博客2.1创建仓库 新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功；仓库名字必须是：username.github.io，其中username是你的用户名；仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟，或者更久，我的等了半个小时才生效； 2.2绑定域名 当然，你不绑定域名肯定也是可以的，就用默认的 xxx.github.io 来访问，如果你想更个性一点，想拥有一个属于自己的域名，那也是OK的。 首先你要注册一个域名，域名注册以前总是推荐去godaddy，现在觉得其实国内的阿里云也挺不错的，价格也不贵，毕竟是大公司，放心！ 绑定域名分2种情况：带www和不带www的。 域名配置最常见有2种方式，CNAME和A记录，CNAME填写域名，A记录填写IP，由于不带www方式只能采用A记录，所以必须先ping一下你的用户名.github.io的IP，然后到你的域名DNS设置页，将A记录指向你ping出来的IP，将CNAME指向你的用户名.github.io，这样可以保证无论是否添加www都可以访问，如下： 然后到你的github项目根目录新建一个名为CNAME的文件（无后缀），里面填写你的域名，加不加www看你自己喜好，因为经测试： 如果你填写的是没有www的，比如 mygit.me，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://mygit.me如果你填写的是带www的，比如 www.mygit.me ，那么无论是访问 http://www.mygit.me 还是 http://mygit.me ，都会自动跳转到 http://www.mygit.me如果你填写的是其它子域名，比如 abc.mygit.me，那么访问 http://abc.mygit.me 没问题，但是访问 http://mygit.me ，不会自动跳转到 http://abc.mygit.me 另外说一句，在你绑定了新域名之后，原来的你的用户名.github.io并没有失效，而是会自动跳转到你的新域名。 3.配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 用git bash执行如下命令： $ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 ssh-keygen -t rsa -C &quot;邮件地址&quot;然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key：将刚复制的内容粘贴到key那里，title随便填，保存。 3.1 测试是否成功 $ ssh -T git@github.com # 注意邮箱地址不用改如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 此时你还需要配置：$ git config --global user.name &quot;liuxianan&quot;// 你的github用户名，非昵称$ git config --global user.email &quot;xxx@qq.com&quot;// 填写你的github注册邮箱 4.使用Hexo写博客4.1 Hexo简介Hexo是一个简单、快速、强大的基于 Github Pages 的博客发布工具，支持Markdown格式，有众多优秀插件和主题。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 4.2 原理 由于github pages存放的都是静态文件，博客存放的不只是文章内容，还有文章列表、分类、标签、翻页等动态内容，假如每次写完一篇文章都要手动更新博文目录和相关链接信息，相信谁都会疯掉，所以hexo所做的就是将这些md文件都放在本地，每次写完文章后调用写好的命令来批量完成相关页面的生成，然后再将有改动的页面提交到github。 4.3注意事项 安装之前先来说几个注意事项：很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 4.4 安装 $ npm install -g hexo 4.5 初始化 在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\\Workspaces\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。$ cd /f/Workspaces/hexo/$ hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下图：$ hexo g # 生成$ hexo s # 启动服务 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github去的： hexo s 是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题请参考这篇文章： http://blog.liuxianan.com/windows-port-bind.html 第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，默认的主题比较丑 4.6. 修改主题 既然默认主题很丑，那我们别的不做，首先来替换一个好看点的主题。这是 官方主题。 个人比较喜欢的2个主题：hexo-theme-jekyll 和 hexo-theme-yilia。 首先下载这个主题： $ cd /f/Workspaces/hexo/$ git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia 下载后的主题都在这里： 修改 _config.yml 中的 theme: landscape 改为 theme: yilia，然后重新执行 hexo g 来重新生成。 如果出现一些莫名其妙的问题，可以先执行 hexo clean 来清理一下 public 的内容，然后再来重新生成和发布。 4.7. 上传之前 在上传代码到github之前，一定要记得先把你以前所有代码下载下来（虽然github有版本管理，但备份一下总是好的），因为从hexo提交代码时会把你以前的所有代码都删掉。 4.8. 上传到github 如果你一切都配置好了，发布上传很容易，一句 hexo d 就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key 肯定要配置好。 其次，配置 _config.yml 中有关 deploy 的部分： 正确写法： deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master 错误写法： deploy: type: github repository: https://github.com/liuxianan/liuxianan.github.io.git branch: master 后面一种写法是hexo2.x的写法，现在已经不行了，无论是哪种写法，此时直接执行 hexo d 的话一般会报如下错误： Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件： npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用git bash，否则会提示 Permission denied (publickey). 打开你的 git bash ，输入 hexo d 就会将本次有改动的代码全部提交，没有改动的不会： 4.9. 保留CNAME、README.md等文件 提交之后网页上一看，发现以前其它代码都没了，此时不要慌，一些非md文件可以把他们放到source文件夹下，这里的所有文件都会原样复制（除了md文件）到public目录的： 由于hexo默认会把所有md文件都转换成html，包括README.md，所有需要每次生成之后、上传之前，手动将README.md复制到public目录，并删除README.html。 4.10. 常用hexo命令 常见命令 hexo new &quot;postName&quot; #新建文章hexo new page &quot;pageName&quot; #新建页面hexo generate #生成静态页面至public目录hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）hexo deploy #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 缩写： hexo n == hexo newhexo g == hexo generatehexo s == hexo serverhexo d == hexo deploy 组合命令： hexo s -g #生成并本地预览hexo d -g #生成并上传 4.11. _config.yml 这里面都是一些全局配置，每个参数的意思都比较简单明了，所以就不作详细介绍了。 需要特别注意的地方是，冒号后面必须有一个空格，否则可能会出问题。 4.12. 写博客 定位到我们的hexo根目录，执行命令： hexo new &apos;my-first-blog&apos; hexo会帮我们在 _posts 下生成相关md文件： 我们只需要打开这个文件就可以开始写博客了，默认生成如下内容： 当然你也可以直接自己新建md文件，用这个命令的好处是帮我们自动生成了时间。 一般完整格式如下： ---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 那么 hexo new page &#39;postName&#39; 命令和 hexo new &#39;postName&#39; 有什么区别呢？ hexo new page &quot;my-second-blog&quot; 生成如下： 最终部署时生成：hexo\\public\\my-second-blog\\index.html ，但是它不会作为文章出现在博文目录。 4.12.1. 写博客工具 那么用什么工具写博客呢？这个我还没去找，以前自己使用editor.md简单弄了个，大家有好用的hexo写博客工具可以推荐个。 4.12.2. 如何让博文列表不显示全部内容 默认情况下，生成的博文目录会显示全部的文章内容，如何设置文章摘要的长度呢？ 答案是在合适的位置加上 &lt;!--more--&gt; 即可，例如： # 前言使用github pages服务搭建博客的好处有：1. 全是静态文件，访问速度快；2. 免费方便，不用花一分钱就可以搭建一个自由的个人博客，不需要服务器不需要后台；3. 可以随意绑定自己的域名，不仔细看的话根本看不出来你的网站是基于github的；&lt;!--more--&gt;4. 数据绝对安全，基于github的版本管理，想恢复到哪个历史版本都行；5. 博客内容可以轻松打包、转移、发布到其它平台；6. 等等； 最终效果： 5.最终效果可以访问我的git博客来查看效果： https://sailorchina.github.io/","categories":[{"name":"博客搭建","slug":"博客搭建","permalink":"http://sailorchina.coding.me/categories/博客搭建/"},{"name":"hexo+github搭建","slug":"博客搭建/hexo-github搭建","permalink":"http://sailorchina.coding.me/categories/博客搭建/hexo-github搭建/"}],"tags":[{"name":"搭建博客","slug":"搭建博客","permalink":"http://sailorchina.coding.me/tags/搭建博客/"},{"name":"Hexo","slug":"Hexo","permalink":"http://sailorchina.coding.me/tags/Hexo/"},{"name":"github","slug":"github","permalink":"http://sailorchina.coding.me/tags/github/"},{"name":"博客","slug":"博客","permalink":"http://sailorchina.coding.me/tags/博客/"}]},{"title":"Markdown基本语法","slug":"Markdown基本语法","date":"2019-03-23T03:21:47.000Z","updated":"2019-04-22T06:54:07.966Z","comments":true,"path":"2019/03/23/Markdown基本语法/","link":"","permalink":"http://sailorchina.coding.me/2019/03/23/Markdown基本语法/","excerpt":"","text":"Markdown是一种纯文本格式的标记语言。通过简单的标记语法，它可以使普通文本内容具有一定的格式。相比WYSIWYG编辑器优点：1、因为是纯文本，所以只要支持Markdown的地方都能获得一样的编辑效果，可以让作者摆脱排版的困扰，专心写作。2、操作简单。比如:WYSIWYG编辑时标记个标题，先选中内容，再点击导航栏的标题按钮，选择几级标题。要三个步骤。而Markdown只需要在标题内容前加#即可缺点：1、需要记一些语法（当然，是很简单。五分钟学会）。2、有些平台不支持Markdown编辑模式。还好，简书是支持Markdown编辑模式的。 一、标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 示例：# 这是一级标题## 这是二级标题### 这是三级标题#### 这是四级标题##### 这是五级标题###### 这是六级标题 效果如下： 这是一级标题这是二级标题这是三级标题这是四级标题这是五级标题这是六级标题 二、字体 加粗要加粗的文字左右分别用两个*号包起来 斜体要倾斜的文字左右分别用一个*号包起来 斜体加粗要倾斜和加粗的文字左右分别用三个*号包起来 删除线要加删除线的文字左右分别用两个~~号包起来示例:**这是加粗的文字***这是倾斜的文字*`***这是斜体加粗的文字***~~这是加删除线的文字~~ 效果如下： 这是加粗的文字这是倾斜的文字`这是斜体加粗的文字 这是加删除线的文字三、引用在引用的文字前加&gt;即可。引用也可以嵌套，如加两个&gt;&gt;三个&gt;&gt;&gt;n个…貌似可以一直加下去，但没神马卵用 示例：&gt;这是引用的内容&gt;&gt;这是引用的内容&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;这是引用的内容 效果如下： 这是引用的内容 这是引用的内容 这是引用的内容 111111 222222 333333 四、分割线 三个或者三个以上的 - 或者 * 都可以。 示例： -------******* 五、列表 无序列表 语法：无序列表用 - + * 任何一种都可以 - 列表内容+ 列表内容* 列表内容注意：- + * 跟内容之间都要有一个空格 效果如下： 列表内容 列表内容 列表内容 有序列表语法：数字加点1. 列表内容2. 列表内容3. 列表内容注意：序号跟内容之间要有空格 效果如下： 列表内容 列表内容 列表内容 六、表格语法： 表头|表头|表头---|:--:|---:内容|内容|内容内容|内容|内容第二行分割表头和内容。- 有一个就行，为了对齐，多加了几个文字默认居左-两边加：表示文字居中-右边加：表示文字居右注：原生的语法两边都要用 | 包起来。此处省略 示例：姓名|技能|排行--|:--:|--:刘备|哭|大哥关羽|打|二哥张飞|骂|三弟 效果如下： 姓名 技能 排行 刘备 哭 大哥 关羽 打 二哥 张飞 骂 三弟 七、代码语法：单行代码：代码之间分别用一个反引号包起来 代码内容 代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行 (```) 代码... 代码... 代码...(```) 注：为了防止转译，前后三个反引号处加了小括号，实际是没有的。这里只是用来演示，实际中去掉两边小括号即可。 示例： 单行代码 create database hero; 代码块 (```) function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;; &#125; fun();(```) 效果如下： 单行代码 create database hero; 代码块 function fun()&#123; echo &quot;这是一句非常牛逼的代码&quot;;&#125;fun();","categories":[{"name":"博客语法","slug":"博客语法","permalink":"http://sailorchina.coding.me/categories/博客语法/"},{"name":"Markdown语法","slug":"博客语法/Markdown语法","permalink":"http://sailorchina.coding.me/categories/博客语法/Markdown语法/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"http://sailorchina.coding.me/tags/Markdown/"},{"name":"语法","slug":"语法","permalink":"http://sailorchina.coding.me/tags/语法/"},{"name":"博客语法","slug":"博客语法","permalink":"http://sailorchina.coding.me/tags/博客语法/"}]},{"title":"Linux系统一键评测","slug":"LINUX系统一键评测","date":"2019-03-23T03:21:47.000Z","updated":"2019-05-05T02:22:19.999Z","comments":true,"path":"2019/03/23/LINUX系统一键评测/","link":"","permalink":"http://sailorchina.coding.me/2019/03/23/LINUX系统一键评测/","excerpt":"","text":"","categories":[{"name":"Linux系统","slug":"Linux系统","permalink":"http://sailorchina.coding.me/categories/Linux系统/"},{"name":"软件","slug":"Linux系统/软件","permalink":"http://sailorchina.coding.me/categories/Linux系统/软件/"},{"name":"一键评测","slug":"Linux系统/软件/一键评测","permalink":"http://sailorchina.coding.me/categories/Linux系统/软件/一键评测/"}],"tags":[{"name":"Linux系统","slug":"Linux系统","permalink":"http://sailorchina.coding.me/tags/Linux系统/"},{"name":"软件","slug":"软件","permalink":"http://sailorchina.coding.me/tags/软件/"},{"name":"一键评测","slug":"一键评测","permalink":"http://sailorchina.coding.me/tags/一键评测/"}]},{"title":"BBR+BBR魔改+Lotsever(锐速)一键脚本 for Centos/Debian/Ubuntu","slug":"BBR+BBR魔改+Lotsever","date":"2019-03-23T03:21:47.000Z","updated":"2019-04-22T06:54:34.292Z","comments":true,"path":"2019/03/23/BBR+BBR魔改+Lotsever/","link":"","permalink":"http://sailorchina.coding.me/2019/03/23/BBR+BBR魔改+Lotsever/","excerpt":"","text":"教程更新【2018年12月24日】脚本新增BBRplus修正版，解决原版bbr在高丢包率下易失速以及bbr收敛慢的问题。尝试使其更好，减少排队和丢包。【2018年3月8日】脚本新增南琴浪的暴力魔改BBR，使速度更加暴力，实际效果因线路而定。 脚本安装支持系统：CentOS 6+、Debian 8+、Ubuntu 14+。 注意：该脚本在Vultr各个系统均测试通过，如果期间有出现任何问题，可向原作者反映帮助改善。运行以下命令： #过程有2步，第1步安装相应的内核，第2步开启内核对应的加速wget -N --no-check-certificate https://github.com/SailorChina/serverspeeder.git &amp;&amp; bash serverspeeder.sh 根据自己需求操作，重启后再使用./tcp.sh命令接着操作。 如果在删除内核环节出现这样一张图 注意选择NO，然后根据提示重启系统。 对于速度提成来说，锐速效果最好，魔改BBR和BBR修正版由于VPS网络不同测试效果不一，具体效果还是自己先测试一下再选择吧。","categories":[{"name":"加速","slug":"加速","permalink":"http://sailorchina.coding.me/categories/加速/"},{"name":"TCP加速","slug":"加速/TCP加速","permalink":"http://sailorchina.coding.me/categories/加速/TCP加速/"}],"tags":[{"name":"BBR","slug":"BBR","permalink":"http://sailorchina.coding.me/tags/BBR/"},{"name":"BBR魔改","slug":"BBR魔改","permalink":"http://sailorchina.coding.me/tags/BBR魔改/"},{"name":"Lotsever(锐速)","slug":"Lotsever-锐速","permalink":"http://sailorchina.coding.me/tags/Lotsever-锐速/"},{"name":"Centos","slug":"Centos","permalink":"http://sailorchina.coding.me/tags/Centos/"},{"name":"Debian","slug":"Debian","permalink":"http://sailorchina.coding.me/tags/Debian/"},{"name":"Ubuntu","slug":"Ubuntu","permalink":"http://sailorchina.coding.me/tags/Ubuntu/"}]},{"title":"Hexo之Next主题添加标签","slug":"hexo之next主题添加标签","date":"2019-03-23T03:21:47.000Z","updated":"2019-04-24T01:19:12.011Z","comments":true,"path":"2019/03/23/hexo之next主题添加标签/","link":"","permalink":"http://sailorchina.coding.me/2019/03/23/hexo之next主题添加标签/","excerpt":"","text":"1、创建“分类”选项1.1 生成“分类”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令$ hexo new page categories 成功后会提示：INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： title: 文章分类date: 2017-05-27 13:47:40 添加type: “categories”到内容中，添加后是这样的：title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot; 保存并关闭文件。 1.2 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 2、创建“标签”选项2.1 生成“标签”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 $ hexo new page tags 成功后会提示：INFO Created: ~/Documents/blog/source/tags/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： title: 标签date: 2017-05-27 14:22:08 添加type: “tags”到内容中，添加后是这样的：title: 文章分类date: 2017-05-27 13:47:40type: &quot;tags&quot; 保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 表单验证就是这篇文章的标签了title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证 至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。教程结束，赶紧去设置吧！","categories":[{"name":"Next主题","slug":"Next主题","permalink":"http://sailorchina.coding.me/categories/Next主题/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://sailorchina.coding.me/tags/Hexo/"},{"name":"Next主题","slug":"Next主题","permalink":"http://sailorchina.coding.me/tags/Next主题/"}]}]}